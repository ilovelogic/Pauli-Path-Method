{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Requirement already satisfied: qiskit in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (1.3.1)\n",
      "Requirement already satisfied: rustworkx>=0.15.0 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from qiskit) (0.15.1)\n",
      "Requirement already satisfied: numpy<3,>=1.17 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from qiskit) (2.0.1)\n",
      "Requirement already satisfied: scipy>=1.5 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from qiskit) (1.15.0)\n",
      "Requirement already satisfied: sympy>=1.3 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from qiskit) (1.13.3)\n",
      "Requirement already satisfied: dill>=0.3 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from qiskit) (0.3.9)\n",
      "Requirement already satisfied: python-dateutil>=2.8.0 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from qiskit) (2.9.0.post0)\n",
      "Requirement already satisfied: stevedore>=3.0.0 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from qiskit) (5.4.0)\n",
      "Requirement already satisfied: typing-extensions in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from qiskit) (4.12.2)\n",
      "Requirement already satisfied: symengine<0.14,>=0.11 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from qiskit) (0.13.0)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from python-dateutil>=2.8.0->qiskit) (1.16.0)\n",
      "Requirement already satisfied: pbr>=2.0.0 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from stevedore>=3.0.0->qiskit) (6.1.0)\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from sympy>=1.3->qiskit) (1.3.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip is available: 24.3.1 -> 25.0\n",
      "[notice] To update, run: C:\\Users\\Erika\\AppData\\Local\\Microsoft\\WindowsApps\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\python.exe -m pip install --upgrade pip\n"
     ]
    }
   ],
   "source": [
    "pip install qiskit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Requirement already satisfied: qiskit-aer in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (0.16.1)\n",
      "Requirement already satisfied: qiskit>=1.1.0 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from qiskit-aer) (1.3.1)\n",
      "Requirement already satisfied: numpy>=1.16.3 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from qiskit-aer) (2.0.1)\n",
      "Requirement already satisfied: scipy>=1.0 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from qiskit-aer) (1.15.0)\n",
      "Requirement already satisfied: psutil>=5 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from qiskit-aer) (6.0.0)\n",
      "Requirement already satisfied: rustworkx>=0.15.0 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from qiskit>=1.1.0->qiskit-aer) (0.15.1)\n",
      "Requirement already satisfied: sympy>=1.3 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from qiskit>=1.1.0->qiskit-aer) (1.13.3)\n",
      "Requirement already satisfied: dill>=0.3 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from qiskit>=1.1.0->qiskit-aer) (0.3.9)\n",
      "Requirement already satisfied: python-dateutil>=2.8.0 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from qiskit>=1.1.0->qiskit-aer) (2.9.0.post0)\n",
      "Requirement already satisfied: stevedore>=3.0.0 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from qiskit>=1.1.0->qiskit-aer) (5.4.0)\n",
      "Requirement already satisfied: typing-extensions in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from qiskit>=1.1.0->qiskit-aer) (4.12.2)\n",
      "Requirement already satisfied: symengine<0.14,>=0.11 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from qiskit>=1.1.0->qiskit-aer) (0.13.0)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from python-dateutil>=2.8.0->qiskit>=1.1.0->qiskit-aer) (1.16.0)\n",
      "Requirement already satisfied: pbr>=2.0.0 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from stevedore>=3.0.0->qiskit>=1.1.0->qiskit-aer) (6.1.0)\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from sympy>=1.3->qiskit>=1.1.0->qiskit-aer) (1.3.0)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip is available: 24.3.1 -> 25.0\n",
      "[notice] To update, run: C:\\Users\\Erika\\AppData\\Local\\Microsoft\\WindowsApps\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\python.exe -m pip install --upgrade pip\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Collecting matplotlib\n",
      "  Using cached matplotlib-3.10.0-cp312-cp312-win_amd64.whl.metadata (11 kB)\n",
      "Collecting contourpy>=1.0.1 (from matplotlib)\n",
      "  Using cached contourpy-1.3.1-cp312-cp312-win_amd64.whl.metadata (5.4 kB)\n",
      "Collecting cycler>=0.10 (from matplotlib)\n",
      "  Using cached cycler-0.12.1-py3-none-any.whl.metadata (3.8 kB)\n",
      "Collecting fonttools>=4.22.0 (from matplotlib)\n",
      "  Downloading fonttools-4.55.8-cp312-cp312-win_amd64.whl.metadata (103 kB)\n",
      "Collecting kiwisolver>=1.3.1 (from matplotlib)\n",
      "  Using cached kiwisolver-1.4.8-cp312-cp312-win_amd64.whl.metadata (6.3 kB)\n",
      "Requirement already satisfied: numpy>=1.23 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from matplotlib) (2.0.1)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from matplotlib) (24.1)\n",
      "Collecting pillow>=8 (from matplotlib)\n",
      "  Using cached pillow-11.1.0-cp312-cp312-win_amd64.whl.metadata (9.3 kB)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from matplotlib) (3.1.2)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from matplotlib) (2.9.0.post0)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\erika\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.12_qbz5n2kfra8p0\\localcache\\local-packages\\python312\\site-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n",
      "Downloading matplotlib-3.10.0-cp312-cp312-win_amd64.whl (8.0 MB)\n",
      "   ---------------------------------------- 0.0/8.0 MB ? eta -:--:--\n",
      "   ------------------- -------------------- 3.9/8.0 MB 19.6 MB/s eta 0:00:01\n",
      "   ----------------------------------- ---- 7.1/8.0 MB 17.5 MB/s eta 0:00:01\n",
      "   ---------------------------------------- 8.0/8.0 MB 13.8 MB/s eta 0:00:00\n",
      "Downloading contourpy-1.3.1-cp312-cp312-win_amd64.whl (220 kB)\n",
      "Downloading cycler-0.12.1-py3-none-any.whl (8.3 kB)\n",
      "Downloading fonttools-4.55.8-cp312-cp312-win_amd64.whl (2.2 MB)\n",
      "   ---------------------------------------- 0.0/2.2 MB ? eta -:--:--\n",
      "   ------------------- -------------------- 1.0/2.2 MB 8.4 MB/s eta 0:00:01\n",
      "   ---------------------------- ----------- 1.6/2.2 MB 4.6 MB/s eta 0:00:01\n",
      "   ---------------------------------------- 2.2/2.2 MB 4.6 MB/s eta 0:00:00\n",
      "Downloading kiwisolver-1.4.8-cp312-cp312-win_amd64.whl (71 kB)\n",
      "Downloading pillow-11.1.0-cp312-cp312-win_amd64.whl (2.6 MB)\n",
      "   ---------------------------------------- 0.0/2.6 MB ? eta -:--:--\n",
      "   --------------------------- ------------ 1.8/2.6 MB 10.1 MB/s eta 0:00:01\n",
      "   ---------------------------------------- 2.6/2.6 MB 7.6 MB/s eta 0:00:00\n",
      "Installing collected packages: pillow, kiwisolver, fonttools, cycler, contourpy, matplotlib\n",
      "Successfully installed contourpy-1.3.1 cycler-0.12.1 fonttools-4.55.8 kiwisolver-1.4.8 matplotlib-3.10.0 pillow-11.1.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip is available: 24.3.1 -> 25.0\n",
      "[notice] To update, run: C:\\Users\\Erika\\AppData\\Local\\Microsoft\\WindowsApps\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\python.exe -m pip install --upgrade pip\n"
     ]
    }
   ],
   "source": [
    "!pip install qiskit-aer\n",
    "!pip install matplotlib\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from qiskit.quantum_info import Pauli, Statevector\n",
    "\n",
    "def normalize_pauli(pauli_string):\n",
    "    \"\"\"\n",
    "    Normalize a Pauli string to match the normalized Pauli basis.\n",
    "    Each single-qubit Pauli operator is divided by sqrt(2).\n",
    "    \"\"\"\n",
    "    n = len(pauli_string)  # Number of qubits\n",
    "    normalization_factor = 1 / np.sqrt(2**n)\n",
    "    pauli_matrix = Pauli(pauli_string).to_matrix()\n",
    "    \n",
    "    return normalization_factor * pauli_matrix \n",
    "import numpy as np\n",
    "from qiskit import QuantumCircuit\n",
    "from qiskit.visualization import plot_histogram\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def extract_qubit_pauli(pauli_string, qubits):\n",
    "    \"\"\"\n",
    "    Extracts the relevant sub-Pauli operator for specific qubits.\n",
    "    \n",
    "    Parameters:\n",
    "        pauli_string (str): Full Pauli string (e.g., \"IZIZ\").\n",
    "        qubits (list): Indices of qubits to extract (e.g., [0, 1]).\n",
    "    \n",
    "    Returns:\n",
    "        str: Sub-Pauli operator for specified qubits.\n",
    "    \"\"\"\n",
    "    return ''.join([pauli_string[q] for q in qubits])\n",
    "\n",
    "def calculate_gate_transition_amplitude(sd, sd_minus_1, gate, qubit_indices):\n",
    "    \"\"\"\n",
    "    Calculate Tr(s_d U_gate s_{d-1} U_gate†) for a single 2-qubit gate.\n",
    "    \n",
    "    Parameters:\n",
    "        sd (str): Current full Pauli operator (e.g., \"IZIZ\").\n",
    "        sd_minus_1 (str): Previous full Pauli operator (e.g., \"XXIX\").\n",
    "        gate (np.ndarray): Unitary matrix for a single 2-qubit gate.\n",
    "        qubit_indices (list): Indices of qubits that the gate acts on.\n",
    "    \n",
    "    Returns:\n",
    "        float: Transition amplitude for this gate.\n",
    "    \"\"\"\n",
    "    # Extract relevant sub-Paulis\n",
    "    sd_sub = extract_qubit_pauli(sd, qubit_indices)\n",
    "    sd_minus_1_sub = extract_qubit_pauli(sd_minus_1, qubit_indices)\n",
    "    \n",
    "    # Convert to normalized matrices\n",
    "    sd_matrix = Pauli(sd_sub).to_matrix() / np.sqrt(2**len(sd_sub))\n",
    "    sd_minus_1_matrix = Pauli(sd_minus_1_sub).to_matrix() / np.sqrt(2**len(sd_minus_1_sub))\n",
    "    \n",
    "    # Compute transition amplitude\n",
    "    transformed_sd_minus_1 = gate @ sd_minus_1_matrix @ gate.conj().T\n",
    "    return np.trace(sd_matrix @ transformed_sd_minus_1).real\n",
    "\n",
    "def calculate_non_gate_transition_amplitude(sd, sd_minus_1, qubit_indices):\n",
    "    \"\"\"\n",
    "    Calculate transition amplitude for qubits not acted upon by any gate.\n",
    "    \n",
    "    Parameters:\n",
    "        sd (str): Current full Pauli operator.\n",
    "        sd_minus_1 (str): Previous full Pauli operator.\n",
    "        qubit_indices (list): Indices of qubits not acted upon by gates.\n",
    "    \n",
    "    Returns:\n",
    "        float: Transition amplitude for non-gate qubits.\n",
    "    \"\"\"\n",
    "    if not qubit_indices:  # If empty, return 1.0\n",
    "        return 1.0\n",
    "        \n",
    "    # Extract relevant sub-Paulis\n",
    "    sd_sub = extract_qubit_pauli(sd, qubit_indices)\n",
    "    sd_minus_1_sub = extract_qubit_pauli(sd_minus_1, qubit_indices)\n",
    "    \n",
    "    # Convert to normalized matrices\n",
    "    sd_matrix = Pauli(sd_sub).to_matrix() / np.sqrt(2**len(sd_sub))\n",
    "    sd_minus_1_matrix = Pauli(sd_minus_1_sub).to_matrix() / np.sqrt(2**len(sd_minus_1_sub))\n",
    "    \n",
    "    # For non-gate qubits, the transition is just Tr(sd_sub · sd_minus_1_sub)\n",
    "    return np.trace(sd_matrix @ sd_minus_1_matrix).real\n",
    "\n",
    "def calculate_layer_transition_amplitude(sd, sd_minus_1, layer_gates, n_qubits):\n",
    "    \"\"\"\n",
    "    Calculate transition amplitude for an entire layer of gates.\n",
    "    \n",
    "    Parameters:\n",
    "        sd (str): Current full Pauli operator (e.g., \"IZIZ\").\n",
    "        sd_minus_1 (str): Previous full Pauli operator (e.g., \"XXIX\").\n",
    "        layer_gates (list of tuples): List of gates in the layer. Each tuple contains:\n",
    "            - The unitary matrix for a 2-qubit gate.\n",
    "            - The indices of qubits that the gate acts on.\n",
    "        n_qubits (int): Total number of qubits in the system.\n",
    "    \n",
    "    Returns:\n",
    "        float: Total transition amplitude for this layer.\n",
    "    \"\"\"\n",
    "    layer_amplitude = 1.0\n",
    "    \n",
    "    # Track which qubits are acted upon by gates\n",
    "    acted_qubits = set()\n",
    "    for _, qubit_indices in layer_gates:\n",
    "        acted_qubits.update(qubit_indices)\n",
    "    \n",
    "    # Calculate transition amplitude for each gate\n",
    "    for gate, qubit_indices in layer_gates:\n",
    "        gate_amplitude = calculate_gate_transition_amplitude(sd, sd_minus_1, gate, qubit_indices)\n",
    "        layer_amplitude *= gate_amplitude\n",
    "    \n",
    "    # Calculate transition amplitude for qubits not acted upon by any gate\n",
    "    non_gate_qubits = [i for i in range(n_qubits) if i not in acted_qubits]\n",
    "    if non_gate_qubits:\n",
    "        non_gate_amplitude = calculate_non_gate_transition_amplitude(sd, sd_minus_1, non_gate_qubits)\n",
    "        layer_amplitude *= non_gate_amplitude\n",
    "    \n",
    "    return layer_amplitude\n",
    "\n",
    "def calculate_input_overlap(s0):\n",
    "    \"\"\"\n",
    "    Calculate Tr(s0 |0^n><0^n|).\n",
    "    \n",
    "    Parameters:\n",
    "        s0 (str): Initial Pauli operator (e.g., \"IZIZ\").\n",
    "    \n",
    "    Returns:\n",
    "        float: Input overlap.\n",
    "    \"\"\"\n",
    "    # Check if s0 contains only I and Z (legal condition)\n",
    "    if not all(op in ['I', 'Z'] for op in s0):\n",
    "        return 0.0\n",
    "        \n",
    "    n = len(s0)  # Number of qubits\n",
    "    \n",
    "    # For a legal initial Pauli operator with only I and Z:\n",
    "    # Count Z operators to determine sign\n",
    "    z_count = s0.count('Z')\n",
    "    \n",
    "    # Normalization factor\n",
    "    norm_factor = 1.0 / np.sqrt(2**n)\n",
    "    \n",
    "    # Return normalized overlap with sign based on Z count\n",
    "    return norm_factor * ((-1)**z_count)\n",
    "\n",
    "def calculate_output_overlap(x, sd):\n",
    "    \"\"\"\n",
    "    Calculate Tr(|x><x| s_d).\n",
    "    \n",
    "    Parameters:\n",
    "        x (str): Output state as a binary string (e.g., \"0000\").\n",
    "        sd (str): Final Pauli operator (e.g., \"ZZII\").\n",
    "    \n",
    "    Returns:\n",
    "        float: Output overlap.\n",
    "    \"\"\"\n",
    "    # Check if sd contains only I and Z (legal condition)\n",
    "    if not all(op in ['I', 'Z'] for op in sd):\n",
    "        return 0.0\n",
    "    \n",
    "    n = len(sd)  # Number of qubits\n",
    "    \n",
    "    # Normalization factor\n",
    "    norm_factor = 1.0 / np.sqrt(2**n)\n",
    "    \n",
    "    # Calculate sign based on Z operators and corresponding bits in x\n",
    "    sign = 1\n",
    "    for i, op in enumerate(sd):\n",
    "        if op == 'Z' and x[i] == '1':\n",
    "            sign *= -1\n",
    "            \n",
    "    return norm_factor * sign\n",
    "\n",
    "def compute_fourier_coefficient(C, s, x):\n",
    "    \"\"\"\n",
    "    Compute f(C, s, x) for a given circuit C and Pauli path s.\n",
    "    \n",
    "    Parameters:\n",
    "        C (list of list of tuples): Circuit as a list of layers,\n",
    "                                    where each layer contains tuples of gates and their acting qubits.\n",
    "                                    Example: [[(CNOT01, [0, 1]), (CNOT23, [2, 3])], ...]\n",
    "        s (list of str): Pauli path as a list of strings (e.g., [\"IZIZ\", \"YIXI\", \"XXIX\", \"ZZII\"]).\n",
    "        x (str): Output state as a binary string (e.g., \"0000\").\n",
    "    \n",
    "    Returns:\n",
    "        float: Fourier coefficient f(C, s, x).\n",
    "    \"\"\"\n",
    "    n = len(s[0])  # Number of qubits\n",
    "    d = len(C)     # Depth of the circuit\n",
    "    \n",
    "    # Check if path is legal (s0 and sd contain only I and Z)\n",
    "    if not all(op in ['I', 'Z'] for op in s[0]) or not all(op in ['I', 'Z'] for op in s[-1]):\n",
    "        return 0.0\n",
    "    \n",
    "    # Input overlap\n",
    "    input_overlap = calculate_input_overlap(s[0])\n",
    "    if input_overlap == 0:\n",
    "        return 0.0\n",
    "    \n",
    "    # Transition amplitudes\n",
    "    transition_amplitude = 1.0\n",
    "    for i in range(d):\n",
    "        layer_amplitude = calculate_layer_transition_amplitude(s[i+1], s[i], C[i], n)\n",
    "        transition_amplitude *= layer_amplitude\n",
    "        if transition_amplitude == 0:\n",
    "            return 0.0\n",
    "    \n",
    "    # Output overlap\n",
    "    output_overlap = calculate_output_overlap(x, s[-1])\n",
    "    \n",
    "    return input_overlap * transition_amplitude * output_overlap\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Preprocessing functions for taking in anne and jesus input \n",
    "def preprocess_circuit_gates(raw_gate_data):\n",
    "    from collections import defaultdict\n",
    "    layers = defaultdict(list)\n",
    "    for gate_matrix, qubits, layer in raw_gate_data:\n",
    "        layers[layer].append((gate_matrix, qubits))\n",
    "    return [layers[i] for i in sorted(layers)]\n",
    "\n",
    "def preprocess_pauli_path(raw_path):\n",
    "    return [''.join(layer) for layer in raw_path]\n",
    "\n",
    "def compute_fourier_from_raw_inputs(raw_gate_data, raw_pauli_path, output_state):\n",
    "    circuit_layers = preprocess_circuit_gates(raw_gate_data)\n",
    "    pauli_path_str = preprocess_pauli_path(raw_pauli_path)\n",
    "    return compute_fourier_coefficient(circuit_layers, pauli_path_str, output_state)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Fourier coefficient with raw inputs f(C, s, x) = 0.0\n"
     ]
    }
   ],
   "source": [
    "if __name__ == \"__main__\":\n",
    "    gate_01 = np.array([\n",
    "        [ 0.52276082+0.0361418j ,  0.152548  +0.19747164j, 0.33408134+0.67642091j,  0.24221037+0.18795612j],\n",
    "        [-0.00945917+0.18095772j, -0.17053029-0.7138475j , -0.1078335 +0.25962698j,  0.42519478-0.41070813j],\n",
    "        [-0.2382395 +0.53491495j,  0.40765612+0.37185391j, 0.17755533+0.00582369j,  0.05121   -0.56432864j],\n",
    "        [-0.52144587+0.27889399j, -0.04551292-0.30421203j, 0.51916506+0.22520659j, -0.28771874+0.39072178j]\n",
    "    ])\n",
    "\n",
    "    gate_23 = np.array([\n",
    "        [ 0.16933099+0.49518196j, -0.17648941+0.09440534j, -0.25311353-0.72416522j, -0.10429706-0.29445095j],\n",
    "        [ 0.0954568 -0.3989199j ,  0.13016058-0.06222619j, -0.25997905-0.16294595j,  0.76582755-0.36097745j],\n",
    "        [ 0.51149066+0.43312816j,  0.4806417 -0.2285176j ,  0.28233598+0.28847464j,  0.06998835-0.31577044j],\n",
    "        [-0.32031373-0.07777638j,  0.71827872-0.37411789j, -0.20561242-0.33491806j, -0.19753231+0.2049289j ]\n",
    "    ])\n",
    "\n",
    "    raw_gate_data = [\n",
    "        (gate_01, (0, 1), 0),\n",
    "        (gate_23, (2, 3), 0),\n",
    "        (gate_01, (0, 1), 1),\n",
    "        (gate_23, (2, 3), 2),\n",
    "    ]\n",
    "\n",
    "    raw_pauli_path = [\n",
    "        ['Z', 'Z', 'I', 'Z'],\n",
    "        ['I', 'X', 'Y', 'I'],\n",
    "        ['I', 'I', 'Z', 'I'],\n",
    "        ['I', 'I', 'I', 'Z']\n",
    "    ]\n",
    "\n",
    "    output_state = \"0000\"\n",
    "\n",
    "    result = compute_fourier_from_raw_inputs(raw_gate_data, raw_pauli_path, output_state)\n",
    "    print(f\" Fourier coefficient with raw inputs f(C, s, x) = {result}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Fourier coefficient with raw inputs f(C, s, x) = 0.0625\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Define CZ gate\n",
    "CZ = np.array([\n",
    "    [1, 0, 0, 0],\n",
    "    [0, 1, 0, 0],\n",
    "    [0, 0, 1, 0],\n",
    "    [0, 0, 0, -1]\n",
    "])\n",
    "\n",
    "# Raw gate data across 3 layers\n",
    "raw_gate_data = [\n",
    "    (CZ, (0, 1), 0),\n",
    "    (CZ, (2, 3), 0),\n",
    "    (CZ, (0, 1), 1),\n",
    "    (CZ, (2, 3), 1),\n",
    "    (CZ, (0, 1), 2),\n",
    "    (CZ, (2, 3), 2),\n",
    "]\n",
    "\n",
    "# Raw Pauli path as list of lists\n",
    "raw_pauli_path = [\n",
    "    ['Z', 'Z', 'Z', 'Z'],\n",
    "    ['Z', 'Z', 'Z', 'Z'],\n",
    "    ['Z', 'Z', 'Z', 'Z'],\n",
    "    ['Z', 'Z', 'Z', 'Z']\n",
    "]\n",
    "\n",
    "# Output state\n",
    "output_state = \"0000\"\n",
    "\n",
    "# Run the computation\n",
    "result = compute_fourier_from_raw_inputs(raw_gate_data, raw_pauli_path, output_state)\n",
    "print(f\" Fourier coefficient with raw inputs f(C, s, x) = {result}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fourier coefficient f(C, s, x) = 0.0625\n"
     ]
    }
   ],
   "source": [
    "##IGNORE: this is the old formatting test, but the outputs we're getting are still the same\n",
    "# Define gates\n",
    "CZ = np.array([[1, 0, 0, 0],\n",
    "               [0, 1, 0, 0],\n",
    "               [0, 0, 1, 0],\n",
    "               [0, 0, 0, -1]])\n",
    "\n",
    "# Define circuit with CZ gates\n",
    "circuit = [\n",
    "    [(CZ, [0, 1]), (CZ, [2, 3])],  # Layer 1\n",
    "    [(CZ, [0, 1]), (CZ, [2, 3])],  # Layer 2\n",
    "    [(CZ, [0, 1]), (CZ, [2, 3])]   # Layer 3\n",
    "]\n",
    "\n",
    "# Define Pauli path\n",
    "pauli_path = [\"ZZZZ\", \"ZZZZ\", \"ZZZZ\", \"ZZZZ\"]\n",
    "\n",
    "# Define output state\n",
    "output_state = \"0000\"\n",
    "\n",
    "# Compute Fourier coefficient\n",
    "result = compute_fourier_coefficient(circuit, pauli_path, output_state)\n",
    "print(f\"Fourier coefficient f(C, s, x) = {result}\")  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "ename": "MissingOptionalLibraryError",
     "evalue": "\"The 'pylatexenc' library is required to use 'MatplotlibDrawer'. You can install it with 'pip install pylatexenc'.\"",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mMissingOptionalLibraryError\u001b[0m               Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[21], line 29\u001b[0m\n\u001b[0;32m     27\u001b[0m \u001b[38;5;66;03m# Build and draw the circuit\u001b[39;00m\n\u001b[0;32m     28\u001b[0m qc \u001b[38;5;241m=\u001b[39m build_qiskit_circuit(raw_gate_data)\n\u001b[1;32m---> 29\u001b[0m \u001b[43mqc\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mmpl\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m  \u001b[38;5;66;03m# This renders a matplotlib visual\u001b[39;00m\n\u001b[0;32m     30\u001b[0m plt\u001b[38;5;241m.\u001b[39mshow()\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mmatplotlib\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpyplot\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mplt\u001b[39;00m\n",
      "File \u001b[1;32m~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\qiskit\\circuit\\quantumcircuit.py:3440\u001b[0m, in \u001b[0;36mQuantumCircuit.draw\u001b[1;34m(self, output, scale, filename, style, interactive, plot_barriers, reverse_bits, justify, vertical_compression, idle_wires, with_layout, fold, ax, initial_state, cregbundle, wire_order, expr_len)\u001b[0m\n\u001b[0;32m   3437\u001b[0m \u001b[38;5;66;03m# pylint: disable=cyclic-import\u001b[39;00m\n\u001b[0;32m   3438\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mqiskit\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mvisualization\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m circuit_drawer\n\u001b[1;32m-> 3440\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mcircuit_drawer\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m   3441\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[0;32m   3442\u001b[0m \u001b[43m    \u001b[49m\u001b[43mscale\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mscale\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   3443\u001b[0m \u001b[43m    \u001b[49m\u001b[43mfilename\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfilename\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   3444\u001b[0m \u001b[43m    \u001b[49m\u001b[43mstyle\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstyle\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   3445\u001b[0m \u001b[43m    \u001b[49m\u001b[43moutput\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43moutput\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   3446\u001b[0m \u001b[43m    \u001b[49m\u001b[43minteractive\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minteractive\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   3447\u001b[0m \u001b[43m    \u001b[49m\u001b[43mplot_barriers\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mplot_barriers\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   3448\u001b[0m \u001b[43m    \u001b[49m\u001b[43mreverse_bits\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mreverse_bits\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   3449\u001b[0m \u001b[43m    \u001b[49m\u001b[43mjustify\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mjustify\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   3450\u001b[0m \u001b[43m    \u001b[49m\u001b[43mvertical_compression\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mvertical_compression\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   3451\u001b[0m \u001b[43m    \u001b[49m\u001b[43midle_wires\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43midle_wires\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   3452\u001b[0m \u001b[43m    \u001b[49m\u001b[43mwith_layout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mwith_layout\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   3453\u001b[0m \u001b[43m    \u001b[49m\u001b[43mfold\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfold\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   3454\u001b[0m \u001b[43m    \u001b[49m\u001b[43max\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43max\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   3455\u001b[0m \u001b[43m    \u001b[49m\u001b[43minitial_state\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minitial_state\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   3456\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcregbundle\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcregbundle\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   3457\u001b[0m \u001b[43m    \u001b[49m\u001b[43mwire_order\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mwire_order\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   3458\u001b[0m \u001b[43m    \u001b[49m\u001b[43mexpr_len\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mexpr_len\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   3459\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32m~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\qiskit\\visualization\\circuit\\circuit_visualization.py:331\u001b[0m, in \u001b[0;36mcircuit_drawer\u001b[1;34m(circuit, scale, filename, style, output, interactive, plot_barriers, reverse_bits, justify, vertical_compression, idle_wires, with_layout, fold, ax, initial_state, cregbundle, wire_order, expr_len)\u001b[0m\n\u001b[0;32m    316\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m _generate_latex_source(\n\u001b[0;32m    317\u001b[0m         circuit,\n\u001b[0;32m    318\u001b[0m         filename\u001b[38;5;241m=\u001b[39mfilename,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    328\u001b[0m         wire_order\u001b[38;5;241m=\u001b[39mcomplete_wire_order,\n\u001b[0;32m    329\u001b[0m     )\n\u001b[0;32m    330\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m output \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmpl\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m--> 331\u001b[0m     image \u001b[38;5;241m=\u001b[39m \u001b[43m_matplotlib_circuit_drawer\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    332\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcircuit\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    333\u001b[0m \u001b[43m        \u001b[49m\u001b[43mscale\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mscale\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    334\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfilename\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfilename\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    335\u001b[0m \u001b[43m        \u001b[49m\u001b[43mstyle\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstyle\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    336\u001b[0m \u001b[43m        \u001b[49m\u001b[43mplot_barriers\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mplot_barriers\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    337\u001b[0m \u001b[43m        \u001b[49m\u001b[43mreverse_bits\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mreverse_bits\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    338\u001b[0m \u001b[43m        \u001b[49m\u001b[43mjustify\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mjustify\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    339\u001b[0m \u001b[43m        \u001b[49m\u001b[43midle_wires\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43midle_wires\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    340\u001b[0m \u001b[43m        \u001b[49m\u001b[43mwith_layout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mwith_layout\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    341\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfold\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfold\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    342\u001b[0m \u001b[43m        \u001b[49m\u001b[43max\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43max\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    343\u001b[0m \u001b[43m        \u001b[49m\u001b[43minitial_state\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minitial_state\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    344\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcregbundle\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcregbundle\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    345\u001b[0m \u001b[43m        \u001b[49m\u001b[43mwire_order\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcomplete_wire_order\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    346\u001b[0m \u001b[43m        \u001b[49m\u001b[43mexpr_len\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mexpr_len\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    347\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    348\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    349\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m VisualizationError(\n\u001b[0;32m    350\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid output type \u001b[39m\u001b[38;5;132;01m{\u001b[39;00moutput\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m selected. The only valid choices \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    351\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mare text, latex, latex_source, and mpl\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    352\u001b[0m     )\n",
      "File \u001b[1;32m~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\qiskit\\visualization\\circuit\\circuit_visualization.py:711\u001b[0m, in \u001b[0;36m_matplotlib_circuit_drawer\u001b[1;34m(circuit, scale, filename, style, plot_barriers, reverse_bits, justify, idle_wires, with_layout, fold, ax, initial_state, cregbundle, wire_order, expr_len)\u001b[0m\n\u001b[0;32m    708\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m fold \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m    709\u001b[0m     fold \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m25\u001b[39m\n\u001b[1;32m--> 711\u001b[0m qcd \u001b[38;5;241m=\u001b[39m \u001b[43m_matplotlib\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mMatplotlibDrawer\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    712\u001b[0m \u001b[43m    \u001b[49m\u001b[43mqubits\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    713\u001b[0m \u001b[43m    \u001b[49m\u001b[43mclbits\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    714\u001b[0m \u001b[43m    \u001b[49m\u001b[43mnodes\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    715\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcircuit\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    716\u001b[0m \u001b[43m    \u001b[49m\u001b[43mscale\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mscale\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    717\u001b[0m \u001b[43m    \u001b[49m\u001b[43mstyle\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstyle\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    718\u001b[0m \u001b[43m    \u001b[49m\u001b[43mreverse_bits\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mreverse_bits\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    719\u001b[0m \u001b[43m    \u001b[49m\u001b[43mplot_barriers\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mplot_barriers\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    720\u001b[0m \u001b[43m    \u001b[49m\u001b[43mfold\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfold\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    721\u001b[0m \u001b[43m    \u001b[49m\u001b[43max\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43max\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    722\u001b[0m \u001b[43m    \u001b[49m\u001b[43minitial_state\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minitial_state\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    723\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcregbundle\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcregbundle\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    724\u001b[0m \u001b[43m    \u001b[49m\u001b[43mwith_layout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mwith_layout\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    725\u001b[0m \u001b[43m    \u001b[49m\u001b[43mexpr_len\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mexpr_len\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    726\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    727\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m qcd\u001b[38;5;241m.\u001b[39mdraw(filename)\n",
      "File \u001b[1;32m~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\qiskit\\utils\\classtools.py:111\u001b[0m, in \u001b[0;36m_WrappedMethod.__get__.<locals>.out\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    108\u001b[0m \u001b[38;5;129m@functools\u001b[39m\u001b[38;5;241m.\u001b[39mwraps(method)\n\u001b[0;32m    109\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mout\u001b[39m(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m    110\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m callback \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_before:\n\u001b[1;32m--> 111\u001b[0m         \u001b[43mcallback\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[38;5;21;43m__get__\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mobj\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mobjtype\u001b[49m\u001b[43m)\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    112\u001b[0m     retval \u001b[38;5;241m=\u001b[39m method(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    113\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m callback \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_after:\n",
      "File \u001b[1;32m~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\qiskit\\utils\\lazy_tester.py:41\u001b[0m, in \u001b[0;36m_RequireNow.__call__\u001b[1;34m(self, *_args, **_kwargs)\u001b[0m\n\u001b[0;32m     40\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;241m*\u001b[39m_args, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m_kwargs):\n\u001b[1;32m---> 41\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_tester\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrequire_now\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_feature\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32m~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\qiskit\\utils\\lazy_tester.py:221\u001b[0m, in \u001b[0;36mLazyDependencyManager.require_now\u001b[1;34m(self, feature)\u001b[0m\n\u001b[0;32m    219\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m:\n\u001b[0;32m    220\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m\n\u001b[1;32m--> 221\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m MissingOptionalLibraryError(\n\u001b[0;32m    222\u001b[0m     libname\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_name, name\u001b[38;5;241m=\u001b[39mfeature, pip_install\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_install, msg\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_msg\n\u001b[0;32m    223\u001b[0m )\n",
      "\u001b[1;31mMissingOptionalLibraryError\u001b[0m: \"The 'pylatexenc' library is required to use 'MatplotlibDrawer'. You can install it with 'pip install pylatexenc'.\""
     ]
    }
   ],
   "source": [
    "#IN PROGRESS: Visualization functions\n",
    "import numpy as np\n",
    "from qiskit import QuantumCircuit\n",
    "from qiskit.visualization import plot_histogram\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "\n",
    "def build_qiskit_circuit(raw_gate_data, n_qubits=4):\n",
    "    qc = QuantumCircuit(n_qubits)\n",
    "    \n",
    "    for gate_matrix, qubits, layer in raw_gate_data:\n",
    "        q0, q1 = qubits\n",
    "        # We'll name them for display clarity\n",
    "        label = f\"CZ_L{layer}\"\n",
    "        # Assume gate is a CZ if matches CZ matrix\n",
    "        if np.allclose(gate_matrix, np.array([[1, 0, 0, 0],\n",
    "                                               [0, 1, 0, 0],\n",
    "                                               [0, 0, 1, 0],\n",
    "                                               [0, 0, 0, -1]])):\n",
    "            qc.cz(q0, q1, label=label)\n",
    "        else:\n",
    "            qc.unitary(gate_matrix, [q0, q1], label=label)\n",
    "    \n",
    "    return qc\n",
    "\n",
    "# Build and draw the circuit\n",
    "qc = build_qiskit_circuit(raw_gate_data)\n",
    "qc.draw('mpl')  # This renders a matplotlib visual\n",
    "plt.show()\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def visualize_pauli_path(pauli_path):\n",
    "    fig, ax = plt.subplots()\n",
    "    ax.axis('off')\n",
    "    table_data = [[\"Layer \" + str(i)] + layer for i, layer in enumerate(pauli_path)]\n",
    "    col_labels = [\"Layer\"] + [f\"q{i}\" for i in range(len(pauli_path[0]))]\n",
    "    \n",
    "    table = ax.table(cellText=table_data,\n",
    "                     colLabels=col_labels,\n",
    "                     loc='center',\n",
    "                     cellLoc='center')\n",
    "    table.scale(1, 2)\n",
    "    table.auto_set_font_size(False)\n",
    "    table.set_fontsize(12)\n",
    "    plt.title(\"Pauli Path per Qubit\")\n",
    "    plt.show()\n",
    "visualize_pauli_path(raw_pauli_path)\n",
    "\n",
    "def visualize_unitary_matrix(matrix, title=\"Unitary\"):\n",
    "    plt.figure(figsize=(6, 5))\n",
    "    plt.imshow(np.abs(matrix), cmap='viridis', interpolation='nearest')\n",
    "    plt.title(title)\n",
    "    plt.colorbar(label=\"|Amplitude|\")\n",
    "    plt.xlabel(\"Column\")\n",
    "    plt.ylabel(\"Row\")\n",
    "    plt.show()\n",
    "\n",
    "visualize_unitary_matrix(CZ, \"CZ Gate\")\n",
    "\n",
    "# Visualize the circuit\n",
    "qc = build_qiskit_circuit(raw_gate_data)\n",
    "qc.draw('mpl')\n",
    "plt.show()\n",
    "\n",
    "# Visualize the Pauli path\n",
    "visualize_pauli_path(raw_pauli_path)\n",
    "\n",
    "# Optional: Visualize the CZ unitary\n",
    "visualize_unitary_matrix(CZ, \"CZ Gate\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Quantum Circuit:\n",
      "        ┌────────────┐┌────────────┐┌────────────┐ ░ ┌─┐   \n",
      "   q_0: ┤0           ├┤0           ├┤0           ├─░─┤M├───\n",
      "        │  Pauli(XZ) ││  Pauli(YY) ││  Pauli(ZX) │ ░ └╥┘┌─┐\n",
      "   q_1: ┤1           ├┤1           ├┤1           ├─░──╫─┤M├\n",
      "        └────────────┘└────────────┘└────────────┘ ░  ║ └╥┘\n",
      "meas: 2/══════════════════════════════════════════════╩══╩═\n",
      "                                                      0  1 \n",
      "Measurement Results: {'00': 1024}\n"
     ]
    }
   ],
   "source": [
    "from qiskit import QuantumCircuit, transpile\n",
    "from qiskit_aer import Aer\n",
    "from qiskit import assemble\n",
    "from qiskit.visualization import plot_histogram\n",
    "from qiskit.quantum_info import Pauli\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Step 1: Create a 2-qubit quantum circuit\n",
    "qc = QuantumCircuit(2)\n",
    "\n",
    "# Step 2: Apply 2-qubit Pauli operators\n",
    "qc.append(Pauli(\"XZ\").to_instruction(), [0, 1])  # X on qubit 0, Z on qubit 1\n",
    "qc.append(Pauli(\"YY\").to_instruction(), [0, 1])  # Y on qubit 0, Y on qubit 1\n",
    "qc.append(Pauli(\"ZX\").to_instruction(), [0, 1])  # Z on qubit 0, X on qubit 1\n",
    "\n",
    "# Step 3: Measure qubits\n",
    "qc.measure_all()\n",
    "\n",
    "# Step 4: Draw the circuit\n",
    "print(\"Quantum Circuit:\")\n",
    "print(qc.draw())\n",
    "\n",
    "# Step 5: Simulate using AerSimulator\n",
    "simulator = Aer.get_backend('aer_simulator')\n",
    "result = simulator.run(qc, shots=1024).result()  # Run the transpiled circuit\n",
    "\n",
    "\n",
    "# Step 6: Get measurement results\n",
    "counts = result.get_counts(qc)\n",
    "# Gate matrices and data from your example\n",
    "raw_gate_data = [\n",
    "    (np.array([[ 0.52276082+0.0361418j ,  0.152548  +0.19747164j,\n",
    "                 0.33408134+0.67642091j,  0.24221037+0.18795612j],\n",
    "               [-0.00945917+0.18095772j, -0.17053029-0.7138475j ,\n",
    "                -0.1078335 +0.25962698j,  0.42519478-0.41070813j],\n",
    "               [-0.2382395 +0.53491495j,  0.40765612+0.37185391j,\n",
    "                 0.17755533+0.00582369j,  0.05121   -0.56432864j],\n",
    "               [-0.52144587+0.27889399j, -0.04551292-0.30421203j,\n",
    "                 0.51916506+0.22520659j, -0.28771874+0.39072178j]]), (0, 1), 0),\n",
    "\n",
    "    (np.array([[ 0.16933099+0.49518196j, -0.17648941+0.09440534j,\n",
    "                -0.25311353-0.72416522j, -0.10429706-0.29445095j],\n",
    "               [ 0.0954568 -0.3989199j ,  0.13016058-0.06222619j,\n",
    "                -0.25997905-0.16294595j,  0.76582755-0.36097745j],\n",
    "               [ 0.51149066+0.43312816j,  0.4806417 -0.2285176j ,\n",
    "                 0.28233598+0.28847464j,  0.06998835-0.31577044j],\n",
    "               [-0.32031373-0.07777638j,  0.71827872-0.37411789j,\n",
    "                -0.20561242-0.33491806j, -0.19753231+0.2049289j ]]), (2, 3), 0),\n",
    "]\n",
    "\n",
    "# Pauli path (layered Pauli strings)\n",
    "raw_pauli_path = [\n",
    "    ['Z', 'Z', 'I', 'Z'],\n",
    "    ['I', 'X', 'Y', 'I'],\n",
    "    ['I', 'I', 'Z', 'I'],\n",
    "    ['I', 'I', 'I', 'Z']\n",
    "]\n",
    "\n",
    "# Final output bitstring\n",
    "output_state = \"0000\"\n",
    "\n",
    "# Run the test\n",
    "result = compute_fourier_from_raw_inputs(raw_gate_data, raw_pauli_path, output_state)\n",
    "print(f\"✅ Test result: Fourier coefficient f(C, s, x) = {result}\")\n",
    "\n",
    "# Step 7: Plot histogram of results\n",
    "print(\"Measurement Results:\", counts)\n",
    "plot_histogram(counts)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
